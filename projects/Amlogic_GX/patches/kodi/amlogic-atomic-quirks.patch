diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
index cb46cbb9d9..fedbdf5ca0 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/RendererDRMPRIME.cpp
@@ -221,16 +221,24 @@ void CRendererDRMPRIME::SetVideoPlane(CVideoBufferDRMPRIME* buffer)
     if(m_DRM->m_req)
     {
       std::shared_ptr<CDRMAtomic> atomic = std::dynamic_pointer_cast<CDRMAtomic>(m_DRM);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "FB_ID",   buffer->m_fb_id);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_ID", atomic->m_crtc->crtc->crtc_id);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "SRC_X",   src_x);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "SRC_Y",   src_y);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "SRC_W",   src_w);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "SRC_H",   src_h);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_X",  crtc_x);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_Y",  crtc_y);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_W",  crtc_w);
-      atomic->AddPlaneProperty(atomic->m_req, atomic->m_primary_plane, "CRTC_H",  crtc_h);
+
+      struct plane *plane;
+
+      if (m_DRM->m_quirk == "meson")
+        plane = atomic->m_overlay_plane;
+      else
+        plane = atomic->m_primary_plane;
+
+      atomic->AddPlaneProperty(atomic->m_req, plane, "FB_ID",   buffer->m_fb_id);
+      atomic->AddPlaneProperty(atomic->m_req, plane, "CRTC_ID", atomic->m_crtc->crtc->crtc_id);
+      atomic->AddPlaneProperty(atomic->m_req, plane, "SRC_X",   src_x);
+      atomic->AddPlaneProperty(atomic->m_req, plane, "SRC_Y",   src_y);
+      atomic->AddPlaneProperty(atomic->m_req, plane, "SRC_W",   src_w);
+      atomic->AddPlaneProperty(atomic->m_req, plane, "SRC_H",   src_h);
+      atomic->AddPlaneProperty(atomic->m_req, plane, "CRTC_X",  crtc_x);
+      atomic->AddPlaneProperty(atomic->m_req, plane, "CRTC_Y",  crtc_y);
+      atomic->AddPlaneProperty(atomic->m_req, plane, "CRTC_W",  crtc_w);
+      atomic->AddPlaneProperty(atomic->m_req, plane, "CRTC_H",  crtc_h);
     }
     else
     {
diff --git a/xbmc/windowing/gbm/DRMAtomic.cpp b/xbmc/windowing/gbm/DRMAtomic.cpp
index 1bed7301de..16009181b3 100644
--- a/xbmc/windowing/gbm/DRMAtomic.cpp
+++ b/xbmc/windowing/gbm/DRMAtomic.cpp
@@ -118,6 +118,68 @@ bool CDRMAtomic::AddPlaneProperty(drmModeAtomicReq *req, struct plane *obj, cons
   return true;
 }
 
+void CDRMAtomic::DrmQuirkAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer)
+{
+  uint32_t blob_id;
+
+  if (flags & DRM_MODE_ATOMIC_ALLOW_MODESET)
+  {
+    if (!AddConnectorProperty(m_req, m_connector->connector->connector_id, "CRTC_ID", m_crtc->crtc->crtc_id))
+    {
+      return;
+    }
+
+    if (drmModeCreatePropertyBlob(m_fd, m_mode, sizeof(*m_mode), &blob_id) != 0)
+    {
+      return;
+    }
+
+    if (!AddCrtcProperty(m_req, m_crtc->crtc->crtc_id, "MODE_ID", blob_id))
+    {
+      return;
+    }
+
+    if (!AddCrtcProperty(m_req, m_crtc->crtc->crtc_id, "ACTIVE", 1))
+    {
+      return;
+    }
+  }
+
+  AddPlaneProperty(m_req, m_primary_plane, "FB_ID", fb_id);
+  AddPlaneProperty(m_req, m_primary_plane, "CRTC_ID", m_crtc->crtc->crtc_id);
+  AddPlaneProperty(m_req, m_primary_plane, "SRC_X", 0);
+  AddPlaneProperty(m_req, m_primary_plane, "SRC_Y", 0);
+  AddPlaneProperty(m_req, m_primary_plane, "SRC_W", m_mode->hdisplay << 16);
+  AddPlaneProperty(m_req, m_primary_plane, "SRC_H", m_mode->vdisplay << 16);
+  AddPlaneProperty(m_req, m_primary_plane, "CRTC_X", 0);
+  AddPlaneProperty(m_req, m_primary_plane, "CRTC_Y", 0);
+  AddPlaneProperty(m_req, m_primary_plane, "CRTC_W", m_mode->hdisplay);
+  AddPlaneProperty(m_req, m_primary_plane, "CRTC_H", m_mode->vdisplay);
+
+  auto ret = drmModeAtomicCommit(m_fd, m_req, flags | DRM_MODE_ATOMIC_TEST_ONLY, nullptr);
+  if (ret < 0)
+  {
+    CLog::Log(LOGERROR, "CDRMAtomic::%s - test commit failed: %s", __FUNCTION__, strerror(errno));
+  }
+  else if (ret == 0)
+  {
+    ret = drmModeAtomicCommit(m_fd, m_req, flags, nullptr);
+    if (ret < 0)
+    {
+      CLog::Log(LOGERROR, "CDRMAtomic::%s - atomic commit failed: %s", __FUNCTION__, strerror(errno));
+    }
+  }
+
+  if (flags & DRM_MODE_ATOMIC_ALLOW_MODESET)
+  {
+    if (drmModeDestroyPropertyBlob(m_fd, blob_id) != 0)
+      CLog::Log(LOGERROR, "CDRMAtomic::%s - failed to destroy property blob: %s", __FUNCTION__, strerror(errno));
+  }
+
+  drmModeAtomicFree(m_req);
+  m_req = drmModeAtomicAlloc();
+}
+
 void CDRMAtomic::DrmAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer)
 {
   uint32_t blob_id;
@@ -224,7 +286,10 @@ void CDRMAtomic::FlipPage(struct gbm_bo *bo, bool rendered, bool videoLayer)
     }
   }
 
-  DrmAtomicCommit(!drm_fb ? 0 : drm_fb->fb_id, flags, rendered, videoLayer);
+  if (m_quirk == "meson")
+    DrmQuirkAtomicCommit(!drm_fb ? 0 : drm_fb->fb_id, flags, rendered, videoLayer);
+  else
+    DrmAtomicCommit(!drm_fb ? 0 : drm_fb->fb_id, flags, rendered, videoLayer);
 }
 
 bool CDRMAtomic::InitDrm()
diff --git a/xbmc/windowing/gbm/DRMAtomic.h b/xbmc/windowing/gbm/DRMAtomic.h
index 167ae18511..92bbc6bdac 100644
--- a/xbmc/windowing/gbm/DRMAtomic.h
+++ b/xbmc/windowing/gbm/DRMAtomic.h
@@ -37,6 +37,7 @@ public:
 private:
   bool AddConnectorProperty(drmModeAtomicReq *req, int obj_id, const char *name, int value);
   bool AddCrtcProperty(drmModeAtomicReq *req, int obj_id, const char *name, int value);
+  void DrmQuirkAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer);
   void DrmAtomicCommit(int fb_id, int flags, bool rendered, bool videoLayer);
 
   bool m_need_modeset;
diff --git a/xbmc/windowing/gbm/DRMUtils.cpp b/xbmc/windowing/gbm/DRMUtils.cpp
index 912a78947d..56746b9950 100644
--- a/xbmc/windowing/gbm/DRMUtils.cpp
+++ b/xbmc/windowing/gbm/DRMUtils.cpp
@@ -275,6 +275,150 @@ bool CDRMUtils::GetPreferredMode()
   return true;
 }
 
+bool CDRMUtils::GetQuirkPlanes()
+{
+  drmModePlaneResPtr plane_resources;
+  uint32_t primary_plane_id = 0;
+  uint32_t overlay_plane_id = 0;
+  uint32_t fourcc = 0;
+
+  plane_resources = drmModeGetPlaneResources(m_fd);
+  if (!plane_resources)
+  {
+    CLog::Log(LOGERROR, "CDRMUtils::%s - drmModeGetPlaneResources failed: %s", __FUNCTION__, strerror(errno));
+    return false;
+  }
+
+  for (uint32_t i = 0; i < plane_resources->count_planes; i++)
+  {
+    uint32_t id = plane_resources->planes[i];
+    drmModePlanePtr plane = drmModeGetPlane(m_fd, id);
+    if (!plane)
+    {
+      CLog::Log(LOGERROR, "CDRMUtils::%s - drmModeGetPlane(%u) failed: %s", __FUNCTION__, id, strerror(errno));
+      continue;
+    }
+
+    if (plane->possible_crtcs & (1 << m_crtc_index))
+    {
+      drmModeObjectPropertiesPtr props = drmModeObjectGetProperties(m_fd, id, DRM_MODE_OBJECT_PLANE);
+
+      for (uint32_t j = 0; j < props->count_props; j++)
+      {
+        drmModePropertyPtr p = drmModeGetProperty(m_fd, props->props[j]);
+
+        if ((strcmp(p->name, "type") == 0) && (props->prop_values[j] == DRM_PLANE_TYPE_PRIMARY) && (primary_plane_id == 0))
+        {
+          CLog::Log(LOGDEBUG, "CDRMUtils::%s - found primary plane: %u", __FUNCTION__, id);
+          primary_plane_id = id;
+        }
+        else if ((strcmp(p->name, "type") == 0) && (props->prop_values[j] == DRM_PLANE_TYPE_OVERLAY) && (overlay_plane_id == 0))
+        {
+          CLog::Log(LOGDEBUG, "CDRMUtils::%s - found overlay plane: %u", __FUNCTION__, id);
+          overlay_plane_id = id;
+        }
+
+        drmModeFreeProperty(p);
+      }
+
+      drmModeFreeObjectProperties(props);
+    }
+
+    drmModeFreePlane(plane);
+  }
+
+  drmModeFreePlaneResources(plane_resources);
+
+  // primary plane
+  m_primary_plane->plane = drmModeGetPlane(m_fd, primary_plane_id);
+  if (!m_primary_plane->plane)
+  {
+    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get primary plane %u: %s", __FUNCTION__, primary_plane_id, strerror(errno));
+    return false;
+  }
+
+  m_primary_plane->props = drmModeObjectGetProperties(m_fd, primary_plane_id, DRM_MODE_OBJECT_PLANE);
+  if (!m_primary_plane->props)
+  {
+    CLog::Log(LOGERROR, "CDRMUtils::%s - could not get primary plane %u properties: %s", __FUNCTION__, primary_plane_id, strerror(errno));
+    return false;
+  }
+
+  m_primary_plane->props_info = new drmModePropertyPtr[m_primary_plane->props->count_props];
+  for (uint32_t i = 0; i < m_primary_plane->props->count_props; i++)
+  {
+    m_primary_plane->props_info[i] = drmModeGetProperty(m_fd, m_primary_plane->props->props[i]);
+  }
+
+  for (uint32_t i = 0; i < m_primary_plane->plane->count_formats; i++)
+  {
+    /* we want an alpha layer so break if we find one */
+    if (m_primary_plane->plane->formats[i] == DRM_FORMAT_ARGB8888)
+    {
+      fourcc = DRM_FORMAT_ARGB8888;
+      m_primary_plane->format = fourcc;
+    }
+  }
+
+  if (fourcc == 0)
+  {
+    CLog::Log(LOGERROR, "CDRMUtils::%s - could not find a suitable primary plane format", __FUNCTION__);
+    return false;
+  }
+
+  CLog::Log(LOGDEBUG, "CDRMUtils::%s - primary plane format: %c%c%c%c", __FUNCTION__, fourcc, fourcc >> 8, fourcc >> 16, fourcc >> 24);
+
+  if (overlay_plane_id != 0)
+  {
+    // overlay plane
+    m_overlay_plane->plane = drmModeGetPlane(m_fd, overlay_plane_id);
+    if (!m_overlay_plane->plane)
+    {
+      CLog::Log(LOGERROR, "CDRMUtils::%s - could not get overlay plane %u: %s", __FUNCTION__, overlay_plane_id, strerror(errno));
+      return false;
+    }
+
+    m_overlay_plane->props = drmModeObjectGetProperties(m_fd, overlay_plane_id, DRM_MODE_OBJECT_PLANE);
+    if (!m_overlay_plane->props)
+    {
+      CLog::Log(LOGERROR, "CDRMUtils::%s - could not get overlay plane %u properties: %s", __FUNCTION__, overlay_plane_id, strerror(errno));
+      return false;
+    }
+
+    m_overlay_plane->props_info = new drmModePropertyPtr[m_overlay_plane->props->count_props];
+    for (uint32_t i = 0; i < m_overlay_plane->props->count_props; i++)
+    {
+      m_overlay_plane->props_info[i] = drmModeGetProperty(m_fd, m_overlay_plane->props->props[i]);
+    }
+
+    fourcc = 0;
+
+    for (uint32_t i = 0; i < m_overlay_plane->plane->count_formats; i++)
+    {
+      /* we want an alpha layer so break if we find one */
+      if (m_overlay_plane->plane->formats[i] == DRM_FORMAT_NV12)
+      {
+        fourcc = DRM_FORMAT_NV12;
+        m_overlay_plane->format = fourcc;
+      }
+    }
+
+    if (fourcc == 0)
+    {
+      CLog::Log(LOGERROR, "CDRMUtils::%s - could not find a suitable overlay plane format", __FUNCTION__);
+      return false;
+    }
+
+    CLog::Log(LOGDEBUG, "CDRMUtils::%s - overlay plane format: %c%c%c%c", __FUNCTION__, fourcc, fourcc >> 8, fourcc >> 16, fourcc >> 24);
+  }
+  else
+  {
+    delete m_overlay_plane;
+    m_overlay_plane = m_primary_plane;
+  }
+  return true;
+}
+
 bool CDRMUtils::GetPlanes()
 {
   drmModePlaneResPtr plane_resources;
@@ -481,6 +625,8 @@ bool CDRMUtils::OpenDrm()
         drmModeFreeProperty(*m_connector->props_info);
         *m_connector->props_info = nullptr;
 
+        m_quirk = module;
+
         CLog::Log(LOGDEBUG, "CDRMUtils::%s - opened device: %s using module: %s", __FUNCTION__, device.c_str(), module);
         return true;
       }
@@ -525,9 +671,19 @@ bool CDRMUtils::InitDrm()
       return false;
     }
 
-    if(!GetPlanes())
+    if (m_quirk == "meson")
     {
-      return false;
+      if (!GetQuirkPlanes())
+      {
+        return false;
+      }
+    }
+    else
+    {
+      if(!GetPlanes())
+      {
+        return false;
+      }
     }
   }
 
diff --git a/xbmc/windowing/gbm/DRMUtils.h b/xbmc/windowing/gbm/DRMUtils.h
index ed481ffb74..3c6a0668f1 100644
--- a/xbmc/windowing/gbm/DRMUtils.h
+++ b/xbmc/windowing/gbm/DRMUtils.h
@@ -85,6 +85,8 @@ public:
   drmModeModeInfo *m_mode = nullptr;
   drmModeAtomicReq *m_req = nullptr;
 
+  std::string m_quirk{""};
+
 protected:
   bool OpenDrm();
   drm_fb * DrmFbGetFromBo(struct gbm_bo *bo);
@@ -94,6 +96,7 @@ private:
   bool GetConnector();
   bool GetEncoder();
   bool GetCrtc();
+  bool GetQuirkPlanes();
   bool GetPlanes();
   bool GetPreferredMode();
   bool RestoreOriginalMode();
