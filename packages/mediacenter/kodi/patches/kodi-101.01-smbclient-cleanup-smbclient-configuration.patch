From 3bc4d84f7df089d8e84c393b986a0cc9cf06c3ce Mon Sep 17 00:00:00 2001
From: chewitt <github@chrishewitt.net>
Date: Tue, 16 May 2017 12:51:32 +0100
Subject: [PATCH] smbclient: cleanup smbclient configuration

---
 .../resource.language.en_gb/resources/strings.po   | 50 +++++++++++++++++++++-
 system/settings/settings.xml                       | 35 +++++++++++++--
 xbmc/filesystem/SMBFile.cpp                        | 24 +++++------
 xbmc/network/NetworkServices.cpp                   |  3 +-
 xbmc/settings/Settings.cpp                         |  4 ++
 xbmc/settings/Settings.h                           |  2 +
 6 files changed, 101 insertions(+), 17 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index e0060d1..5ca90b8 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -19063,7 +19063,55 @@ msgctxt "#36620"
 msgid "Enable high quality downscaling of pictures (uses more memory and has moderate performance impact)."
 msgstr ""
 
-#empty strings from id 36621 to 36899
+#. Label of a setting, allow the maximum smbclient protocol to be configured
+#: system/settings/settings.xml
+msgctxt "#36621"
+msgid "Maximum protocol version"
+msgstr ""
+
+#. Description of setting with label #36621 "Maximum protocol version"
+#: system/settings/settings.xml
+msgctxt "#36622"
+msgid "Set the maximum SMB protocol version that can be negotiated (default SMBv3). Reduce to SMBv2 or SMBv1 for compatibility with older NAS and Windows shares if required."
+msgstr ""
+
+#. Values for setting with label #36621 "Maximum protocol version"
+#: system/settings/settings.xml
+msgctxt "#36623"
+msgid "SMBv1"
+msgstr ""
+
+#. Values for setting with label #36621 "Maximum protocol version"
+#: system/settings/settings.xml
+msgctxt "#36624"
+msgid "SMBv2"
+msgstr ""
+
+#. Values for setting with label #36621 "Maximum protocol version"
+#: system/settings/settings.xml
+msgctxt "#36625"
+msgid "SMBv3"
+msgstr ""
+
+#. Label of a setting, allow overwrite of user smb.conf used with smbclient
+#: system/settings/settings.xml
+msgctxt "#36626"
+msgid "Configure SMB client"
+msgstr ""
+
+#. Description of setting with label #36626 "Configure smbclient"
+#: system/settings/settings.xml
+msgctxt "#36627"
+msgid "Configuring overwrites ~/.smb/smb.conf on next restart. The setting is automatically disabled after restarting"
+msgstr ""
+
+#. Label of a group, that allows configuration of the system SMB client
+#: system/settings/settings.xml
+msgctxt "#36628"
+msgid "Client"
+msgstr ""
+
+#empty strings from id 36629 to 36899
 
 #: xbmc/media/MediaType.cpp
 msgctxt "#36900"
diff --git a/system/settings/settings.xml b/system/settings/settings.xml
index 301e727..5ed4f18 100644
--- a/system/settings/settings.xml
+++ b/system/settings/settings.xml
@@ -1944,15 +1944,44 @@
     <category id="smb" label="1200" help="36346">
       <requirement>HAS_FILESYSTEM_SMB</requirement>
       <group id="1" label="16000">
+        <setting id="smb.workgroup" type="string" label="1202" help="36348">
+          <level>2</level>
+          <default>WORKGROUP</default>
+          <control type="edit" format="string" />
+        </setting>
+      </group>
+      <group id="2" label="36628">
+        <setting id="smb.overwriteconf" type="boolean" label="36626" help="36627">
+          <level>2</level>
+          <default>false</default>
+          <control type="toggle" />
+        </setting>
         <setting id="smb.winsserver" type="string" label="1207" help="36347">
           <level>2</level>
           <default>0.0.0.0</default>
+          <dependencies>
+            <dependency type="enable">
+              <condition setting="smb.overwriteconf" operator="is">true</condition>
+            </dependency>
+          </dependencies>
           <control type="edit" format="ip" />
         </setting>
-        <setting id="smb.workgroup" type="string" label="1202" help="36348">
+        <setting id="smb.maxprotocol" type="integer" label="36621" help="36622">
           <level>2</level>
-          <default>WORKGROUP</default>
-          <control type="edit" format="string" />
+          <default>3</default>
+          <dependencies>
+            <dependency type="enable">
+              <condition setting="smb.overwriteconf" operator="is">true</condition>
+            </dependency>
+          </dependencies>
+          <constraints>
+            <options>
+              <option label="36623">1</option>
+              <option label="36624">2</option>
+              <option label="36625">3</option>
+            </options>
+          </constraints>
+          <control type="list" format="integer" />
         </setting>
       </group>
     </category>
diff --git a/xbmc/filesystem/SMBFile.cpp b/xbmc/filesystem/SMBFile.cpp
index e53d555..a07a3d8 100644
--- a/xbmc/filesystem/SMBFile.cpp
+++ b/xbmc/filesystem/SMBFile.cpp
@@ -100,26 +100,23 @@ void CSMB::Init()
     std::string home(getenv("HOME"));
     URIUtils::RemoveSlashAtEnd(home);
     snprintf(smb_conf, sizeof(smb_conf), "%s/.smb", home.c_str());
-    if (mkdir(smb_conf, 0755) == 0)
+    int result = mkdir(smb_conf, 0755);
+    if (result == 0 || (errno == EEXIST && CSettings::GetInstance().GetBool(CSettings::SETTING_SMB_OVERWRITECONF)))
     {
-      snprintf(smb_conf, sizeof(smb_conf), "%s/.smb/smb.conf", getenv("HOME"));
+      snprintf(smb_conf, sizeof(smb_conf), "%s/.smb/smb.conf", home.c_str());
       FILE* f = fopen(smb_conf, "w");
       if (f != NULL)
       {
         fprintf(f, "[global]\n");
 
-        // make sure we're not acting like a server
-        fprintf(f, "\tpreferred master = no\n");
-        fprintf(f, "\tlocal master = no\n");
-        fprintf(f, "\tdomain master = no\n");
-
-        // use the weaker LANMAN password hash in order to be compatible with older servers
-        fprintf(f, "\tclient lanman auth = yes\n");
-        fprintf(f, "\tlanman auth = yes\n");
-
-        fprintf(f, "\tsocket options = TCP_NODELAY IPTOS_LOWDELAY SO_RCVBUF=65536 SO_SNDBUF=65536\n");      
         fprintf(f, "\tlock directory = %s/.smb/\n", getenv("HOME"));
 
+        // set maximum smbclient protocol version
+        if (CSettings::GetInstance().GetInt(CSettings::SETTING_SMB_MAXPROTOCOL) == 1)
+          fprintf(f, "\tclient max protocol = NT1\n");
+        else
+          fprintf(f, "\tclient max protocol = SMB%d\n", CSettings::GetInstance().GetInt(CSettings::SETTING_SMB_MAXPROTOCOL));
+
         // set wins server if there's one. name resolve order defaults to 'lmhosts host wins bcast'.
         // if no WINS server has been specified the wins method will be ignored.
         if (CSettings::GetInstance().GetString(CSettings::SETTING_SMB_WINSSERVER).length() > 0 && !StringUtils::EqualsNoCase(CSettings::GetInstance().GetString(CSettings::SETTING_SMB_WINSSERVER), "0.0.0.0") )
@@ -136,6 +133,9 @@ void CSMB::Init()
           fprintf(f, "\tdos charset = %s\n", g_advancedSettings.m_sambadoscodepage.c_str());
 
         fclose(f);
+
+        // disable overwrite setting
+        CSettings::GetInstance().SetBool(CSettings::SETTING_SMB_OVERWRITECONF, false);
       }
     }
 
diff --git a/xbmc/network/NetworkServices.cpp b/xbmc/network/NetworkServices.cpp
index 6c58426..393dabc 100644
--- a/xbmc/network/NetworkServices.cpp
+++ b/xbmc/network/NetworkServices.cpp
@@ -438,7 +438,8 @@ void CNetworkServices::OnSettingChanged(const CSetting *setting)
   else
 #endif // HAS_WEB_SERVER
   if (settingId == CSettings::SETTING_SMB_WINSSERVER ||
-      settingId == CSettings::SETTING_SMB_WORKGROUP)
+      settingId == CSettings::SETTING_SMB_WORKGROUP ||
+      settingId == CSettings::SETTING_SMB_MAXPROTOCOL)
   {
     // okey we really don't need to restart, only deinit samba, but that could be damn hard if something is playing
     //! @todo - General way of handling setting changes that require restart
diff --git a/xbmc/settings/Settings.cpp b/xbmc/settings/Settings.cpp
index 9b3372b..3a4b36e 100644
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -333,6 +333,8 @@ const std::string CSettings::SETTING_SERVICES_AIRPLAYPASSWORD = "services.airpla
 const std::string CSettings::SETTING_SERVICES_AIRPLAYVIDEOSUPPORT = "services.airplayvideosupport";
 const std::string CSettings::SETTING_SMB_WINSSERVER = "smb.winsserver";
 const std::string CSettings::SETTING_SMB_WORKGROUP = "smb.workgroup";
+const std::string CSettings::SETTING_SMB_MAXPROTOCOL = "smb.maxprotocol";
+const std::string CSettings::SETTING_SMB_OVERWRITECONF = "smb.overwriteconf";
 const std::string CSettings::SETTING_VIDEOSCREEN_MONITOR = "videoscreen.monitor";
 const std::string CSettings::SETTING_VIDEOSCREEN_SCREEN = "videoscreen.screen";
 const std::string CSettings::SETTING_VIDEOSCREEN_RESOLUTION = "videoscreen.resolution";
@@ -1159,6 +1161,8 @@ void CSettings::InitializeISettingCallbacks()
   settingSet.insert(CSettings::SETTING_SERVICES_ESCONTINUOUSDELAY);
   settingSet.insert(CSettings::SETTING_SMB_WINSSERVER);
   settingSet.insert(CSettings::SETTING_SMB_WORKGROUP);
+  settingSet.insert(CSettings::SETTING_SMB_MAXPROTOCOL);
+  settingSet.insert(CSettings::SETTING_SMB_OVERWRITECONF);
   m_settingsManager->RegisterCallback(&CNetworkServices::GetInstance(), settingSet);
 
   settingSet.clear();
diff --git a/xbmc/settings/Settings.h b/xbmc/settings/Settings.h
index 2921b72..9250e77 100644
--- a/xbmc/settings/Settings.h
+++ b/xbmc/settings/Settings.h
@@ -290,6 +290,8 @@ public:
   static const std::string SETTING_SERVICES_AIRPLAYVIDEOSUPPORT;
   static const std::string SETTING_SMB_WINSSERVER;
   static const std::string SETTING_SMB_WORKGROUP;
+  static const std::string SETTING_SMB_MAXPROTOCOL;
+  static const std::string SETTING_SMB_OVERWRITECONF;
   static const std::string SETTING_VIDEOSCREEN_MONITOR;
   static const std::string SETTING_VIDEOSCREEN_SCREEN;
   static const std::string SETTING_VIDEOSCREEN_RESOLUTION;
-- 
2.0.1

